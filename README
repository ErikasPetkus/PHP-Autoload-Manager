_______________________

AutoLoad Manager README
_______________________
                         

Authors 
=======
Al-Fallouji Bashar, 
    - bashar@alfallouji.com

Charron Pierrick
    - pierrick@webstart.fr


DESCRIPTION
===========

Cms AutoLoad Manager is a generic autoloader that can be used with any
framework or library.

Using the PHP tokenizer mechanism, it will parse folder(s) and discover
the different classes and interfaces defined.

The big advantage of using this autoloadManager is that it will allow
you to implement whatever naming rules you want and may have mutliple
classes in one file (if you want to have a such feature).

So basically, you don’t have anymore to implement some complex naming rules
between the filename and the classname. You may organize the way you want
your API (may have as many subfolders as you want, you may have multiple 
API folders, etc.).


How does it work ?
==================

It will scan any given folder and find any defined PHP classes or interfaces. It will then create an hashtable that will reference what class can be found in what file. This hash table is serialized and cached in a file.

Whenever, your program or script will look for a non-existing class, the autoloadManager will look on that hash table and load the file if it exists. A fallback mechanism can be used also in a development environment that will try to rescan all the folders once more (this mechanism is usefull when you are often adding new classes to your program).


Where can I download it ?
=========================

Latest version is available on github at :

http://github.com/alfallouji/PHP-Autoload-Manager-/


How can I use it ?
==================

First, you will have simply to load the autoloadManager class into your script.

    include('api/autoloadManager.php'); 


Secondly, you will have to define the path where the autoloadManager will 
store the file containing the serialized hash table.

    // Defines the path where the file containing the autoload
    // array will be stored
    // Apache User must have Write Access to this folder !
    DEFINE('AUTOLOAD_SAVE_PATH', sys_get_temp_dir()); 


Then, you have the two main features offered by this script.

1. Register the loadClass function:

    spl_autoload_register('cmsAutoloadManager::loadClass'); 


2. Add a folder to process:

    cmsAutoloadManager::addFolder('{YOUR_FOLDER_PATH}');


For instance, if your classes are found in ‘/var/www/myProject/lib’ and 
‘/var/www/myProject/includes’, then you can do something like this.

    cmsAutoloadManager::addFolder('/var/www/myProject/lib');
    cmsAutoloadManager::addFolder('/var/www/myProject/includes');
    spl_autoload_register('cmsAutoloadManager::loadClass'); 



